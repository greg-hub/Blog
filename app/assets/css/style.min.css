/*!
 * Blog
 * Coding Blog
 * #
 * @author Hossein Karami
 * @version 0.0.1
 * Copyright 2017. MIT licensed.
 */
*{margin:0;padding:0;box-sizing:border-box}@font-face{font-family:walkway_boldregular;src:url(../fonts/Walkway_Bold-webfont.eot);src:url(../fonts/Walkway_Bold-webfont.eot?#iefix) format("embedded-opentype"),url(../fonts/Walkway_Bold-webfont.woff) format("woff"),url(../fonts/Walkway_Bold-webfont.ttf) format("truetype"),url(../fonts/Walkway_Bold-webfont.svg#walkway_boldregular) format("svg");font-weight:400;font-style:normal}#header{margin:0 auto}#header,#header h1{background-color:#212020}#header h1{font-family:walkway_boldregular,Sans-Serif;font-size:3rem;text-align:center;color:#fff;padding-top:.4em}@media (min-width:600px){#header h1{font-size:4rem}}@media (min-width:1025px){#header h1{font-size:5.5rem;padding-bottom:.4em}}.Hide{display:block;margin:0 auto;color:#fff;font-size:2rem;border-style:none;background-color:#212020;padding-bottom:.5em}@media (min-width:1025px){.Hide{display:none}}nav{display:block;list-style:none;color:#fff;padding-top:1em;padding-bottom:.5em;margin:0 auto}nav,nav ul{width:100%;background-color:#212020}nav ul{text-align:center}nav li{font-family:walkway_boldregular,Sans-Serif;font-size:1.2rem;letter-spacing:1px;display:inline-block;padding-bottom:1.5em;padding-right:.5em;padding-left:.5em}@media (min-width:1025px){nav li{padding-bottom:2em}}nav a{margin:0 auto;border-radius:8px}a.active,nav a{color:#fff;text-decoration:none;padding:.5em 1.5em}a.active{outline:none}a.active,a:hover{background:#0e0e0e}button:focus{outline:0}.hidden{display:none}@media (min-width:600px){.hidden .hidden{display:none}}@media (min-width:1025px){.hidden{display:block!important}}@media (min-width:1025px){.hide{display:none}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
