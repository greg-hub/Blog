/*!
 * Blog
 * Coding Blog
 * #
 * @author Hossein Karami
 * @version 0.0.1
 * Copyright 2017. MIT licensed.
 */
*{margin:0;padding:0;box-sizing:border-box}@font-face{font-family:walkway_boldregular;src:url(../fonts/Walkway_Bold-webfont.eot);src:url(../fonts/Walkway_Bold-webfont.eot?#iefix) format("embedded-opentype"),url(../fonts/Walkway_Bold-webfont.woff) format("woff"),url(../fonts/Walkway_Bold-webfont.ttf) format("truetype"),url(../fonts/Walkway_Bold-webfont.svg#walkway_boldregular) format("svg");font-weight:400;font-style:normal}.Sticky{min-height:calc(100vh - 3em)}#header{margin:0 auto}#header,#header h1{background-color:#212020}#header h1{font-family:walkway_boldregular,Sans-Serif;font-size:3rem;text-align:center;color:#fff;padding-top:.4em}@media (min-width:600px){#header h1{font-size:4rem}}@media (min-width:1025px){#header h1{font-size:5.5rem;padding-bottom:.4em}}#header h1 a{text-decoration:none;color:#fff}.Hide{display:block;margin:0 auto;color:#fff;font-size:2rem;border-style:none;background-color:#212020;padding-bottom:.5em}@media (min-width:1025px){.Hide{display:none}}nav{display:block;list-style:none;color:#fff;padding-top:1em;padding-bottom:.5em;margin:0 auto}nav,nav ul{width:100%;background-color:#212020}nav ul{text-align:center}nav li{font-family:walkway_boldregular,Sans-Serif;font-size:1.2rem;letter-spacing:1px;display:inline-block;padding-bottom:1.5em;padding-right:.5em;padding-left:.5em}@media (min-width:1025px){nav li{padding-bottom:2em}}nav a{margin:0 auto;border-radius:8px}.hidden a.active,nav a{color:#fff;text-decoration:none;padding:.5em 1.5em}.hidden a.active{outline:none}.hidden a.active,.hidden a:hover{background:#0e0e0e}button:focus{outline:0}.hidden{display:none}@media (min-width:600px){.hidden .hidden{display:none}}@media (min-width:1025px){.hidden{display:block!important}}@media (min-width:1025px){.hide{display:none}}footer{height:3em;font-family:Ubuntu,sans-serif;background-color:#212020}footer h5{color:#fff;font-size:.8rem;font-weight:400;text-align:center;padding-top:1em;padding-bottom:1em}body{background-color:#f2f2f4}.Blog{width:85%;margin:0 auto;padding-top:2em;font-family:walkway_boldregular,Sans-Serif}.Blog h2{color:#373d3f;font-family:Ubuntu,sans-serif;font-weight:500;text-align:center;font-size:1.5rem}@media (min-width:1025px){.Blog{padding-top:4em}.Blog h2{font-size:3rem}}.info{width:60%;font-family:Ubuntu,sans-serif;height:2em;display:inline-block;width:100%;font-size:1.6rem;color:#000;text-align:center}.info img{width:15px;height:auto}.info h5{font-size:10px;display:inline-block;vertical-align:top;padding-top:10px}.info h5,.info p{font-family:Ubuntu,sans-serif;color:#373d3f}.info p{padding-top:.5em;font-size:1rem;line-height:1.3em}@media (min-width:600px){.info p{width:80%;margin:0 auto}}@media (min-width:1025px){.info,.info p{padding-top:1em}.info p{padding-bottom:1em;font-size:1.1rem;width:60%}.info h5{font-size:15px;padding-top:5px}.info img{width:20px;height:auto}}.blogger{display:inline-block;padding-left:1em}h4.More{font-family:Ubuntu,sans-serif;font-size:.8rem;text-align:center;padding-top:2em;padding-bottom:2em;background-color:none}@media (min-width:1025px){h4.More{font-size:.9rem}}h4 a{text-decoration:none;color:#373d3f}.More a:hover{color:#0e0e0e}hr{margin-top:1em;opacity:.3}.about h2{color:#373d3f;font-size:1.5rem}.about h2,.about h5{font-family:Ubuntu,sans-serif;font-weight:500;text-align:center;padding-top:1em}.about h5{width:80%;margin:0 auto;display:block;font-size:1rem;line-height:1.3em}@media (min-width:600px){.about h5{width:70%}}@media (min-width:1025px){.about{padding-top:2em}.about h2{font-size:3rem}.about h5{width:55%;text-align:left;font-size:1.1rem;padding-top:2em}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
